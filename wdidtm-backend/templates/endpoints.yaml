AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 instance with SSM access for database setup scripts'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where the instance will be created
  
  PrivateSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Private subnet ID for the EC2 instance
  
  DBProxySecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security Group ID of your DB Proxy
  
  InstanceType:
    Type: String
    Default: t3.micro
    Description: EC2 instance type
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
  
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
    Description: Latest Amazon Linux 2 AMI ID

Resources:
  # IAM Role for SSM access
  SSMInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-SSMInstanceRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: DatabaseSetupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:DescribeDBClusters
                  - rds-db:connect
                Resource: '*'

  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${AWS::StackName}-SSMInstanceProfile'
      Roles:
        - !Ref SSMInstanceRole

  # Security Group for the EC2 instance
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-InstanceSG'
      GroupDescription: Security group for SSM-managed instance
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS for SSM and package downloads
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP for package downloads
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-InstanceSG'

  # Allow instance to connect to DB Proxy
  DBProxyIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref DBProxySecurityGroupId
      IpProtocol: tcp
      FromPort: 5432  # Change to 3306 for MySQL
      ToPort: 5432    # Change to 3306 for MySQL
      SourceSecurityGroupId: !Ref InstanceSecurityGroup
      Description: Allow access from setup instance

  # VPC Endpoints for SSM (if not already present)
  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VpcId
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetId
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - ssm:*
            Resource: '*'

  SSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VpcId
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssmmessages'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetId
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  EC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VpcId
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ec2messages'
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnetId
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  # Security Group for VPC Endpoints
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-VPCEndpointSG'
      GroupDescription: Security group for SSM VPC endpoints
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
          Description: HTTPS from EC2 instance
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPCEndpointSG'

  # EC2 Instance
  SetupInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref SSMInstanceProfile
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref PrivateSubnetId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y postgresql mysql
          
          # Install additional tools you might need
          yum install -y git python3 pip
          
          # Create a directory for setup scripts
          mkdir -p /home/ec2-user/setup-scripts
          chown ec2-user:ec2-user /home/ec2-user/setup-scripts
          
          # Signal that the instance is ready
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SetupInstance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SetupInstance'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M

Outputs:
  InstanceId:
    Description: ID of the EC2 instance
    Value: !Ref SetupInstance
    Export:
      Name: !Sub '${AWS::StackName}-InstanceId'

  SSMConnectionCommand:
    Description: Command to connect to the instance using Session Manager
    Value: !Sub 'aws ssm start-session --target ${SetupInstance}'

  InstanceSecurityGroupId:
    Description: Security Group ID of the instance
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-InstanceSG'
