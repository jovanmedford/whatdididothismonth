AWSTemplateFormatVersion: 2010-09-09
Description: >-
  wdidtm-backend
Transform:
  - AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: WDIDTMUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
        - AttributeDataType: String
          Name: given_name
          Required: true
        - AttributeDataType: String
          Name: family_name
          Required: true

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get all items from
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the WDIDTMTable
        - DynamoDBCrudPolicy:
            TableName: !Ref WDIDTMTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          WDIDTM_TABLE: !Ref WDIDTMTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  getUserActivitiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-user-activities.getUserActivitiesHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get user activities for a specified period.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the WDIDTMTable
        - DynamoDBCrudPolicy:
            TableName: !Ref WDIDTMTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          WDIDTM_TABLE: !Ref WDIDTMTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /activities
            Method: GET

  # This is a Lambda function config associated with the source code: get-by-id.js
  getByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP get method to get one item by
        id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the WDIDTMTable
        - DynamoDBCrudPolicy:
            TableName: !Ref WDIDTMTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          WDIDTM_TABLE: !Ref WDIDTMTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /{id}
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description:
        A simple example includes a HTTP post method to add one item to
        a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the WDIDTMTable
        - DynamoDBCrudPolicy:
            TableName: !Ref WDIDTMTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          WDIDTM_TABLE: !Ref WDIDTMTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: POST
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  WDIDTMTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeType: S
          AttributeName: userId
        - AttributeType: S
          AttributeName: sk
      KeySchema:
        - KeyType: HASH
          AttributeName: userId
        - KeyType: RANGE
          AttributeName: sk
      ProvisionedThroughput:
        WriteCapacityUnits: 2
        ReadCapacityUnits: 2

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: "true"
Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
# # More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
