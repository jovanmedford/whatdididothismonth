AWSTemplateFormatVersion: 2010-09-09
Description: >-
  wdidtm-backend
Transform:
  - AWS::Serverless-2016-10-31
Parameters:
  RdsUser:
    Description: Database Master User Name
    Type: String
    Default: postgresql
  RdsPassword:
    Description: Database Master User Password
    Type: String
    Default: postgresql
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: dev
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.16.0.0/16
  AppSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the serveless ENIs
    Type: String
    Default: 10.16.10.0/24
  DBSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the DB
    Type: String
    Default: 10.16.11.0/24
  DBSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the DB
    Type: String
    Default: 10.16.12.0/24

Resources:
  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./templates/vpc.yaml
      Parameters:
        EnvironmentName: !Ref EnvironmentName
        VpcCIDR: !Ref VpcCIDR
        AppSubnet1CIDR: !Ref AppSubnet1CIDR
        DBSubnet1CIDR: !Ref DBSubnet1CIDR
        DBSubnet2CIDR: !Ref DBSubnet2CIDR

  DB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./templates/db.yaml
      Parameters:
        RdsUser: !Ref RdsUser
        RdsPassword: !Ref RdsPassword
        DBSecurityGroup: !GetAtt VPC.Outputs.DBSecurityGroup
        DBSubnets: !GetAtt VPC.Outputs.DBSubnets
    DependsOn: VPC

  # --- Proxy  ---
  ProxyKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Enabled: true
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: Allow access to key from this account
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: "*"
          - Sid: Allow RDS to use the key
            Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
              - kms:Encrypt

  ProxySecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Credentials for proxy to access db.
      KmsKeyId: !GetAtt ProxyKmsKey.Arn
      SecretString: !Sub '{"username": "${RdsUser}", "password": "${RdsPassword}"}'

  ProxyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - rds.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: proxy-key-access
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref ProxySecret
              - Effect: Allow
                Action: kms:Decrypt
                Resource: !GetAtt ProxyKmsKey.Arn
                Condition:
                  StringEquals:
                    kms:ViaService: !Sub secretsmanager.${AWS::Region}.amazonaws.com

  DbProxy:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./templates/db-proxy.yaml
      Parameters:
        DBInstanceName: !GetAtt DB.Outputs.DBInstanceName
        DBProxySecurityGroup: !GetAtt VPC.Outputs.DBProxySecurityGroup
        DBProxyRoleArn: !GetAtt ProxyRole.Arn
        DBSubnets: !GetAtt VPC.Outputs.DBSubnets
        ProxySecret: !Ref ProxySecret

  # --- Security --

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: WDIDTMUserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
        - AttributeDataType: String
          Name: given_name
          Required: true
        - AttributeDataType: String
          Name: family_name
          Required: true
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: WDIDTM-ui-client
      GenerateSecret: false
      UserPoolId: !GetAtt CognitoUserPool.UserPoolId

  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      IdentityPoolName: WDIDTM-identity-pool
      CognitoIdentityProviders:
        - ProviderName: !GetAtt CognitoUserPool.ProviderName
          ClientId: !GetAtt UserPoolClient.ClientId

  IdentityPoolRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref CognitoIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: "authenticated"
      Policies:
        - PolicyName: IdentityPoolAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "cognito-identity:GetCredentialsForIdentity"
                Resource: "*"

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        authenticated: !GetAtt IdentityPoolRole.Arn

  # --- API ---

  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'OPTIONS, GET'"
        AllowHeaders: "'Access-Control-Allow-Methods,Access-Control-Allow-Headers,Access-Control-Allow-Origin,Content-Type,Authorization'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: MyCognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  postConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/post-confirmation.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Handles cognito post confirmation event.
      Environment:
        Variables:
          DB_USERNAME: !Ref RdsUser
          DB_PASSWORD: !Ref RdsPassword
          DB_PORT: 5432
          DB_PROXY_ENDPOINT: !GetAtt DbProxy.Outputs.DBProxyEndpoint
          DB_NAME: "postgres"
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.Outputs.AppSecurityGroup
        SubnetIds: !Split [",", !GetAtt VPC.Outputs.AppSubnets]
      Events:
        Cognito:
          Type: Cognito
          Properties:
            UserPool: !Ref CognitoUserPool
            Trigger: PostConfirmation

  getActivityLogsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/activity-logs-get.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Get user activities for a specified period.
      Environment:
        Variables:
          DB_USERNAME: !Ref RdsUser
          DB_PASSWORD: !Ref RdsPassword
          DB_PORT: 5432
          DB_PROXY_ENDPOINT: !GetAtt DbProxy.Outputs.DBProxyEndpoint
          DB_NAME: "postgres"
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.Outputs.AppSecurityGroup
        SubnetIds: !Split [",", !GetAtt VPC.Outputs.AppSubnets]
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /activity-logs
            Method: GET

  postActivityLogsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/activity-logs-post.handler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Create a new activity log.
      Environment:
        Variables:
          DB_USERNAME: !Ref RdsUser
          DB_PASSWORD: !Ref RdsPassword
          DB_PORT: 5432
          DB_PROXY_ENDPOINT: !GetAtt DbProxy.Outputs.DBProxyEndpoint
          DB_NAME: "postgres"
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.Outputs.AppSecurityGroup
        SubnetIds: !Split [",", !GetAtt VPC.Outputs.AppSubnets]
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /activity-logs
            Method: POST

  successLogsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/success-logs.successLogsHandler
      Runtime: nodejs22.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Add or delete successes.
      Environment:
        Variables:
          DB_USERNAME: !Ref RdsUser
          DB_PASSWORD: !Ref RdsPassword
          DB_PORT: 5432
          DB_PROXY_ENDPOINT: !GetAtt DbProxy.Outputs.DBProxyEndpoint
          DB_NAME: "postgres"
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VPC.Outputs.AppSecurityGroup
        SubnetIds: !Split [",", !GetAtt VPC.Outputs.AppSubnets]
      Events:
        AddSuccessLog:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /success-logs
            Method: POST
        DeleteSuccessLog:
          Type: Api
          Properties:
            RestApiId: !Ref MyApi
            Path: /success-logs
            Method: DELETE

  # addCategoryFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/handlers/add-category.addCategoryHandler
  #     Runtime: nodejs22.x
  #     Architectures:
  #       - x86_64
  #     MemorySize: 128
  #     Timeout: 100
  #     Description: Create a new category.

  #     Environment:
  #       Variables:
  # DB_USERNAME: !Ref RdsUser
  # DB_PASSWORD: !Ref RdsPassword
  # DB_PORT: 5432
  # DB_PROXY_ENDPOINT: !GetAtt DBProxy.Outputs.DBProxyEndpoint
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref MyApi
  #           Path: /categories
  #           Method: POST

  # addActivityFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/handlers/add-activity.addActivityHandler
  #     Runtime: nodejs22.x
  #     Architectures:
  #       - x86_64
  #     MemorySize: 128
  #     Timeout: 100
  #     Description: Create a new activity.

  #     Environment:
  #       Variables:
  #         DB_USERNAME: !Ref RdsUser
  # DB_PASSWORD: !Ref RdsPassword
  # DB_PORT: 5432
  # DB_PROXY_ENDPOINT: !GetAtt DBProxy.Outputs.DBProxyEndpoint
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref MyApi
  #           Path: /activities
  #           Method: POST

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
    # You can add LoggingConfig parameters such as the Logformat, Log Group, and SystemLogLevel or ApplicationLogLevel. Learn more here https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html#sam-function-loggingconfig.
    LoggingConfig:
      LogFormat: JSON
  Api:
    TracingEnabled: true
